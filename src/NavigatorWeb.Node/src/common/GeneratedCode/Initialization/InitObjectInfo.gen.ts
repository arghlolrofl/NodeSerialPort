// codegeneration at: 13.09.2016 16:12:32
// ------------------------------------------------------------------------------
// <auto-generated>
//       This file has been generated by the tool: PSBuilder
//       Version:[1.0.15.3941]
// </auto-generated>
// ------------------------------------------------------------------------------

// START: Significant code

// Start of usercode. ID: UserCodeSection

// End of usercode.

namespace FP.NavigatorWeb.Common.Initialization
{
	/// <summary>
	/// contains information that need to be transferred to the software after the connection most of the information is used for software feature configuration, some is country dependant
	/// </summary>
	export class InitObjectInfo
	{ 
		//#region t4 generated members 
		private m_CountryVariant: string;

		private m_SupportedSoftware: SupportedSoftwareInfo[];

		private m_SupportedSms: FP.NavigatorWeb.Common.Number16Bit;

		private m_MaxDateAhead: FP.NavigatorWeb.Common.FPDate;

		private m_MaxDateBack: FP.NavigatorWeb.Common.FPDate;

		private m_FMLocalTime: FP.NavigatorWeb.Common.FPDateTime;

		private m_SupportedHotkeys: FP.NavigatorWeb.Common.Number16Bit;

		private m_DateIsRequired: boolean;

		private m_CultureString: string;

		private m_MailPieceCount: FP.NavigatorWeb.Common.Number32Bit;

		private m_DecimalModeSupported: boolean;

		private m_DifferentialWeighingActive: boolean;

		private m_HeartbeatTimeout: FP.NavigatorWeb.Common.Number32Bit;

		private m_ProtocolVersionNumber: FP.NavigatorWeb.Common.Number32Bit;

		//#endregion

		//#region t4 generated properties 
		/// <summary>
        /// Gets or sets the CountryVariant.
		/// Description: country variant string
        /// </summary>
        /// <value>The CountryVariant.</value>
		get CountryVariant(): string { return this.m_CountryVariant; }
		set CountryVariant(value: string) { this.m_CountryVariant = value; }

		/// <summary>
        /// Gets or sets the SupportedSoftware.
		/// Description: List of software supported by the meter
        /// </summary>
        /// <value>The SupportedSoftware.</value>
		get SupportedSoftware(): SupportedSoftwareInfo[] { return this.m_SupportedSoftware; }
		set SupportedSoftware(value: SupportedSoftwareInfo[]) { this.m_SupportedSoftware = value; }

		/// <summary>
        /// Gets or sets the SupportedSms.
		/// Description: maximum number of sms supported
        /// </summary>
        /// <value>The SupportedSms.</value>
		get SupportedSms(): FP.NavigatorWeb.Common.Number16Bit { return this.m_SupportedSms; }
		set SupportedSms(value: FP.NavigatorWeb.Common.Number16Bit) { this.m_SupportedSms = value; }

		/// <summary>
        /// Gets or sets the MaxDateAhead.
		/// Description: the maximum date ahead value for the mailing date
        /// </summary>
        /// <value>The MaxDateAhead.</value>
		get MaxDateAhead(): FP.NavigatorWeb.Common.FPDate { return this.m_MaxDateAhead; }
		set MaxDateAhead(value: FP.NavigatorWeb.Common.FPDate) { this.m_MaxDateAhead = value; }

		/// <summary>
        /// Gets or sets the MaxDateBack.
		/// Description: maximum date back value for the mailing date
        /// </summary>
        /// <value>The MaxDateBack.</value>
		get MaxDateBack(): FP.NavigatorWeb.Common.FPDate { return this.m_MaxDateBack; }
		set MaxDateBack(value: FP.NavigatorWeb.Common.FPDate) { this.m_MaxDateBack = value; }

		/// <summary>
        /// Gets or sets the FMLocalTime.
		/// Description: current local date and time of the mailhandler
        /// </summary>
        /// <value>The FMLocalTime.</value>
		get FMLocalTime(): FP.NavigatorWeb.Common.FPDateTime { return this.m_FMLocalTime; }
		set FMLocalTime(value: FP.NavigatorWeb.Common.FPDateTime) { this.m_FMLocalTime = value; }

		/// <summary>
        /// Gets or sets the SupportedHotkeys.
		/// Description: contains the maximum number of hotkeys that may be created
        /// </summary>
        /// <value>The SupportedHotkeys.</value>
		get SupportedHotkeys(): FP.NavigatorWeb.Common.Number16Bit { return this.m_SupportedHotkeys; }
		set SupportedHotkeys(value: FP.NavigatorWeb.Common.Number16Bit) { this.m_SupportedHotkeys = value; }

		/// <summary>
        /// Gets or sets the DateIsRequired.
		/// Description: states whether every imprint requires a valid date.
        /// </summary>
        /// <value>The DateIsRequired.</value>
		get DateIsRequired(): boolean { return this.m_DateIsRequired; }
		set DateIsRequired(value: boolean) { this.m_DateIsRequired = value; }

		/// <summary>
        /// Gets or sets the CultureString.
		/// Description: .NET Culture string (en-US or de-DE)
        /// </summary>
        /// <value>The CultureString.</value>
		get CultureString(): string { return this.m_CultureString; }
		set CultureString(value: string) { this.m_CultureString = value; }

		/// <summary>
        /// Gets or sets the MailPieceCount.
		/// Description: current value of the mailpiece counter Note! this is not the global PieceCounter from PSD registers !
        /// </summary>
        /// <value>The MailPieceCount.</value>
		get MailPieceCount(): FP.NavigatorWeb.Common.Number32Bit { return this.m_MailPieceCount; }
		set MailPieceCount(value: FP.NavigatorWeb.Common.Number32Bit) { this.m_MailPieceCount = value; }

		/// <summary>
        /// Gets or sets the DecimalModeSupported.
		/// Description: states whether decimal mode is supported Note! this does not state anything about the decimal mode being enabled!
        /// </summary>
        /// <value>The DecimalModeSupported.</value>
		get DecimalModeSupported(): boolean { return this.m_DecimalModeSupported; }
		set DecimalModeSupported(value: boolean) { this.m_DecimalModeSupported = value; }

		/// <summary>
        /// Gets or sets the DifferentialWeighingActive.
		/// Description: Contains information about whether differential weighing is active in the mailhandler. (it has been purchased and may be enabled / disabled by the user using EnableDifferentialWeighing)
        /// </summary>
        /// <value>The DifferentialWeighingActive.</value>
		get DifferentialWeighingActive(): boolean { return this.m_DifferentialWeighingActive; }
		set DifferentialWeighingActive(value: boolean) { this.m_DifferentialWeighingActive = value; }

		/// <summary>
        /// Gets or sets the HeartbeatTimeout.
		/// Description: The timeout in milliseconds wherein the machine expects a message before assuming that the connection to the pc programm has been lost.
        /// </summary>
        /// <value>The HeartbeatTimeout.</value>
		get HeartbeatTimeout(): FP.NavigatorWeb.Common.Number32Bit { return this.m_HeartbeatTimeout; }
		set HeartbeatTimeout(value: FP.NavigatorWeb.Common.Number32Bit) { this.m_HeartbeatTimeout = value; }

		/// <summary>
        /// Gets or sets the ProtocolVersionNumber.
		/// Description: The version number of the communication protocol used by the FM
        /// </summary>
        /// <value>The ProtocolVersionNumber.</value>
		get ProtocolVersionNumber(): FP.NavigatorWeb.Common.Number32Bit { return this.m_ProtocolVersionNumber; }
		set ProtocolVersionNumber(value: FP.NavigatorWeb.Common.Number32Bit) { this.m_ProtocolVersionNumber = value; }

		//#endregion
	}
}

// END: Significant code